services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB} # Using service name 'db' as host
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT} # Using service name 'redis' as host
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    env_file:
      - .env

  db:
    image: postgres:16.4-alpine
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 10
    env_file:
      - .env
  redis:
    image: redis:7.4-alpine
    restart: always
    volumes:
      - redis-data:/var/lib/redis/data
    environment:
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}

    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    dozzle:
      image: amir20/dozzle:latest
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /path/to/dozzle/data:/data
      ports:
        - 8080:8080
      environment:
        DOZZLE_AUTH_PROVIDER: simple
        DOZZLE_AUTH_TTL: 48h

volumes:
  db-data:
  redis-data:


