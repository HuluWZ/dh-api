// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                   @id @default(autoincrement())
  userName               String?               @unique
  firstName              String?
  middleName             String?
  lastName               String?
  email                  String?               @unique
  phone                  String                @unique
  isActive               Boolean               @default(false)
  isVerified             Boolean               @default(false)
  lastSeenVisibility     ProfileVisibilityType @default(Everybody)
  phoneVisibility        ProfileVisibilityType @default(MyContacts)
  profile                String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  otpCode                String?
  otpExpiresAt           DateTime?
  organizations          Org[]
  orgInvite              OrgInvite[]           @relation(name: "Invitee")
  OrgInvite              OrgInvite[]           @relation(name: "InviteOwner")
  orgMember              OrgMember[]
  OrgGroupMember         OrgGroupMember[]
  OrgGroupAdmin          OrgGroupAdmin[]
  TaskAsignee            TaskAsignee[]
  OrgGroup               OrgGroup[]
  UserAdmin              UserAdmin[]
  FCM                    FCM[]
  Notification           Notification[]
  SenderPrivateMessage   PrivateMessage[]      @relation(name: "sender")
  ReceiverPrivateMessage PrivateMessage[]      @relation(name: "receiver")
  GroupMessage           GroupMessage[]        @relation(name: "senderGroup")
  UserContact            UserContact[]
  PhoneChangeRequests    PhoneChangeRequests[]
  ArchivedTasks          ArchivedTasks[]
  OwnershipTransfer      OwnershipTransfer[]   @relation(name: "orgOwner")
  NewOwnershipTransfer   OwnershipTransfer[]   @relation(name: "newOrgOwner")
  Poll                   Poll[]
  PollVote               PollVote[]
  SavedMessage           SavedMessage[]
}

model Industry {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  organizations Org[]
}

model Region {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  organizations Org[]
}

model Org {
  id                Int                 @id @default(autoincrement())
  name              String
  ownerId           Int
  industryId        Int
  regionId          Int?
  logo              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  owner             User?               @relation(fields: [ownerId], references: [id])
  industry          Industry            @relation(fields: [industryId], references: [id])
  region            Region?             @relation(fields: [regionId], references: [id])
  orgInvite         OrgInvite[]
  OrgMember         OrgMember[]
  OrgGroup          OrgGroup[]
  OwnershipTransfer OwnershipTransfer[]
}

model OrgInvite {
  id        Int             @id @default(autoincrement())
  orgId     Int
  ownerId   Int
  inviteeId Int
  status    OrgInviteStatus @default(Pending)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  owner     User            @relation(name: "InviteOwner", fields: [ownerId], references: [id])
  invitee   User            @relation(name: "Invitee", fields: [inviteeId], references: [id])
  org       Org             @relation(fields: [orgId], references: [id])
}

enum OrgInviteStatus {
  Pending
  Approved
  Rejected
}

model OrgMember {
  orgId     Int
  memberId  Int
  role      OrgMemberStatus @default(Member)
  position  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  org       Org             @relation(fields: [orgId], references: [id])
  member    User            @relation(fields: [memberId], references: [id])

  @@unique([orgId, memberId])
  @@index([orgId, memberId])
}

enum OrgMemberStatus {
  Member
  Admin
  Owner
  Connector
}

model OrgGroup {
  id             Int              @id @default(autoincrement())
  name           String
  color          String?
  orgId          Int?
  createdBy      Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  org            Org?             @relation(fields: [orgId], references: [id])
  personal       User?            @relation(fields: [createdBy], references: [id])
  OrgGroupMember OrgGroupMember[]
  OrgGroupAdmin  OrgGroupAdmin[]
  GroupMessage   GroupMessage[]
  Task           Task[]
  Poll           Poll[]
}

model OrgGroupMember {
  groupId   Int
  memberId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     OrgGroup @relation(fields: [groupId], references: [id])
  member    User     @relation(fields: [memberId], references: [id])

  @@unique([groupId, memberId])
  @@index([groupId, memberId])
}

model OrgGroupAdmin {
  groupId   Int
  memberId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     OrgGroup @relation(fields: [groupId], references: [id])
  member    User     @relation(fields: [memberId], references: [id])

  @@unique([groupId, memberId])
  @@index([groupId, memberId])
}

enum TaskPriority {
  Urgent
  High
  Medium
  Low
  NoPriority
}

enum TaskStatus {
  Backlog
  Todo
  InProgress
  AwaitingReview
  InReview
  Done
}

model Task {
  id            Int             @id @default(autoincrement())
  name          String
  desc          String?
  deadline      DateTime?
  isPinned      Boolean         @default(false)
  priority      TaskPriority?   @default(NoPriority)
  status        TaskStatus?     @default(Todo)
  groupId       Int
  monitoredBy   Int?
  position      Int?
  createdBy     Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  TaskAsignee   TaskAsignee[]
  group         OrgGroup        @relation(fields: [groupId], references: [id])
  ArchivedTasks ArchivedTasks[]
}

model TaskAsignee {
  taskId    Int
  memberId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  member    User     @relation(fields: [memberId], references: [id])

  @@unique([taskId, memberId])
  @@index([taskId, memberId])
}

model UserAdmin {
  userId    Int      @unique
  admin     User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FCM {
  userId    Int
  deviceId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, deviceId])
  @@index([userId, deviceId])
}

enum NotificationType {
  Task
  Communication
  System
  Others
}

model Notification {
  id        Int              @id @default(autoincrement())
  title     String
  body      String
  icon      String?
  type      NotificationType @default(Task)
  userId    Int
  is_seen   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
}

enum MessageType {
  Text
  Image
  Video
  Audio
  File
  Link
  System
}

model PrivateMessage {
  id                Int         @id @default(autoincrement())
  senderId          Int
  receiverId        Int
  content           String
  type              MessageType @default(Text)
  is_seen           Boolean     @default(false)
  is_pinned         Boolean     @default(false)
  deletedBySender   Boolean     @default(false) // Deleted for sender
  deletedByReceiver Boolean     @default(false) // Deleted for receiver

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  replyToId Int?
  replyTo   PrivateMessage?  @relation("Replies", fields: [replyToId], references: [id])
  replies   PrivateMessage[] @relation("Replies")

  sender       User           @relation(name: "sender", fields: [senderId], references: [id])
  receiver     User           @relation(name: "receiver", fields: [receiverId], references: [id])
  SavedMessage SavedMessage[]
}

model GroupMessage {
  id          Int         @id @default(autoincrement())
  senderId    Int?
  content     String
  groupId     Int
  type        MessageType @default(Text)
  is_seen     Boolean     @default(false)
  is_pinned   Boolean     @default(false)
  is_archived Boolean     @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User?    @relation(name: "senderGroup", fields: [senderId], references: [id])
  group     OrgGroup @relation(fields: [groupId], references: [id])

  replyToId    Int?
  replyTo      GroupMessage?  @relation("Replies", fields: [replyToId], references: [id])
  replies      GroupMessage[] @relation("Replies")
  SavedMessage SavedMessage[]
}

model Contact {
  id          Int           @id @default(autoincrement())
  phone       String
  createdAt   DateTime      @default(now())
  UserContact UserContact[]

  @@unique([phone])
  @@index([phone])
}

model UserContact {
  userId    Int
  contactId Int
  firstName String
  lastName  String?
  company   String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [userId], references: [id])
  contact   Contact  @relation(fields: [contactId], references: [id])

  @@unique([userId, contactId])
  @@index([userId, contactId])
}

enum ProfileVisibilityType {
  Everybody
  Nobody
  MyContacts
}

model PhoneChangeRequests {
  id           Int      @id @default(autoincrement())
  userId       Int
  phone        String
  otpCode      String
  otpExpiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ArchivedTasks {
  id        Int      @id @default(autoincrement())
  taskId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, taskId])
  @@index([userId, taskId])
}

model Advertisement {
  id          Int      @id @default(autoincrement())
  logo        String?
  title       String
  description String
  link        String
  expireDate  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OwnershipTransfer {
  id          Int      @id @default(autoincrement())
  orgId       Int
  ownerId     Int
  newOwnerId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  org         Org      @relation(fields: [orgId], references: [id])
  orgOwner    User     @relation(name: "orgOwner", fields: [ownerId], references: [id])
  newOrgOwner User     @relation(name: "newOrgOwner", fields: [newOwnerId], references: [id])
}

model Poll {
  id          Int        @id @default(autoincrement())
  groupId     Int
  createdBy   Int
  question    String
  options     String[]
  isAnonymous Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  votes       PollVote[]
  group       OrgGroup   @relation(fields: [groupId], references: [id])
  creator     User       @relation(fields: [createdBy], references: [id])
}

model PollVote {
  id        Int      @id @default(autoincrement())
  pollId    Int
  userId    Int
  option    String
  createdAt DateTime @default(now())
  poll      Poll     @relation(fields: [pollId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([pollId, userId])
}

enum ChatType {
  PrivateMessage
  GroupMessage
}

model SavedMessage {
  id          Int      @id @default(autoincrement())
  userId      Int
  messageId   Int
  messageType ChatType
  savedAt     DateTime @default(now())

  user           User            @relation(fields: [userId], references: [id])
  privateMessage PrivateMessage? @relation(fields: [messageId], references: [id], map: "SavedMessage_privateMessageId_fkey")
  groupMessage   GroupMessage?   @relation(fields: [messageId], references: [id], map: "SavedMessage_groupMessageId_fkey")
}
