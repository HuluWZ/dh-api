// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int              @id @default(autoincrement())
  userName               String?          @unique
  firstName              String?
  middleName             String?
  lastName               String?
  email                  String?          @unique
  phone                  String           @unique
  isActive               Boolean          @default(false)
  isVerified             Boolean          @default(false)
  profile                String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  otpCode                String?
  otpExpiresAt           DateTime?
  organizations          Org[]
  orgInvite              OrgInvite[]      @relation(name: "Invitee")
  OrgInvite              OrgInvite[]      @relation(name: "InviteOwner")
  orgMember              OrgMember[]
  OrgGroupMember         OrgGroupMember[]
  OrgGroupAdmin          OrgGroupAdmin[]
  TaskAsignee            TaskAsignee[]
  OrgGroup               OrgGroup[]
  UserAdmin              UserAdmin[]
  FCM                    FCM[]
  Notification           Notification[]
  SenderPrivateMessage   PrivateMessage[] @relation(name: "sender")
  ReceiverPrivateMessage PrivateMessage[] @relation(name: "receiver")
  GroupMessage           GroupMessage[]   @relation(name: "senderGroup")
}

model Industry {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  organizations Org[]
}

model Region {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  organizations Org[]
}

model Org {
  id         Int         @id @default(autoincrement())
  name       String
  ownerId    Int
  industryId Int
  regionId   Int?
  logo       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  owner      User?       @relation(fields: [ownerId], references: [id])
  industry   Industry    @relation(fields: [industryId], references: [id])
  region     Region?     @relation(fields: [regionId], references: [id])
  orgInvite  OrgInvite[]
  OrgMember  OrgMember[]
  OrgGroup   OrgGroup[]
}

model OrgInvite {
  id        Int             @id @default(autoincrement())
  orgId     Int
  ownerId   Int
  inviteeId Int
  status    OrgInviteStatus @default(Pending)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  owner     User            @relation(name: "InviteOwner", fields: [ownerId], references: [id])
  invitee   User            @relation(name: "Invitee", fields: [inviteeId], references: [id])
  org       Org             @relation(fields: [orgId], references: [id])
}

enum OrgInviteStatus {
  Pending
  Approved
  Rejected
}

model OrgMember {
  orgId     Int
  memberId  Int
  role      OrgMemberStatus @default(Member)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  org       Org             @relation(fields: [orgId], references: [id])
  member    User            @relation(fields: [memberId], references: [id])

  @@unique([orgId, memberId])
  @@index([orgId, memberId])
}

enum OrgMemberStatus {
  Member
  Admin
  Owner
}

model OrgGroup {
  id             Int              @id @default(autoincrement())
  name           String
  color          String?
  orgId          Int?
  createdBy      Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  org            Org?             @relation(fields: [orgId], references: [id])
  personal       User?            @relation(fields: [createdBy], references: [id])
  OrgGroupMember OrgGroupMember[]
  OrgGroupAdmin  OrgGroupAdmin[]
  GroupMessage   GroupMessage[]
}

model OrgGroupMember {
  groupId   Int
  memberId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     OrgGroup @relation(fields: [groupId], references: [id])
  member    User     @relation(fields: [memberId], references: [id])

  @@unique([groupId, memberId])
  @@index([groupId, memberId])
}

model OrgGroupAdmin {
  groupId   Int
  memberId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     OrgGroup @relation(fields: [groupId], references: [id])
  member    User     @relation(fields: [memberId], references: [id])

  @@unique([groupId, memberId])
  @@index([groupId, memberId])
}

enum TaskPriority {
  Urgent
  High
  Medium
  Low
  NoPriority
}

enum TaskStatus {
  Backlog
  Todo
  InProgress
  AwaitingReview
  InReview
  Done
}

model Task {
  id          Int           @id @default(autoincrement())
  name        String
  desc        String?
  deadline    DateTime?
  priority    TaskPriority? @default(NoPriority)
  status      TaskStatus?   @default(Todo)
  groupId     Int
  monitoredBy Int?
  createdBy   Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TaskAsignee TaskAsignee[]
}

model TaskAsignee {
  taskId    Int
  memberId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  member    User     @relation(fields: [memberId], references: [id])

  @@unique([taskId, memberId])
  @@index([taskId, memberId])
}

model UserAdmin {
  userId    Int      @unique
  admin     User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FCM {
  userId    Int
  deviceId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, deviceId])
  @@index([userId, deviceId])
}

enum NotificationType {
  Task
  Communication
  System
  Others
}

model Notification {
  id        Int              @id @default(autoincrement())
  title     String
  body      String
  icon      String?
  type      NotificationType @default(Task)
  userId    Int
  is_seen   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
}

enum MessageType {
  Text
  Image
  Video
  Audio
  File
}

model PrivateMessage {
  id         Int         @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  type       MessageType @default(Text)
  is_seen    Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  sender     User        @relation(name: "sender", fields: [senderId], references: [id])
  receiver   User        @relation(name: "receiver", fields: [receiverId], references: [id])
}

model GroupMessage {
  id        Int         @id @default(autoincrement())
  senderId  Int
  content   String
  groupId   Int
  type      MessageType @default(Text)
  is_seen   Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  sender    User        @relation(name: "senderGroup", fields: [senderId], references: [id])
  group     OrgGroup    @relation(fields: [groupId], references: [id])
}
